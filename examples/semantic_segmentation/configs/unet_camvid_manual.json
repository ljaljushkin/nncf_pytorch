{
    "model": "unet",
    "dataset" : "camvid",
    "preprocessing": {
        "resize": {
            "height": 368,
            "width": 480
        },
        "normalize":
        {
            "mean": [0.39068785, 0.40521392, 0.41434407],
            "std" : [0.29652068, 0.30514979, 0.30080369]
        }
    },
    "input_info": {
      "sample_size": [1, 3, 368, 480]
    },

    "weighing": "mfb",

    "optimizer": {
        "type": "Adam",
        "optimizer_params": {
            "lr": 5.0e-4,
            "weight_decay": 2.0e-4
        },
        "schedule_type": "step",
        "step": 100,
        "gamma": 0.1
    },

    "model_params": {
         "input_size_hw": [368, 480]
    },
    "target_device": "VPU",
    "compression": {
        "algorithm": "quantization",
        "initializer": {
            "precision": {
                "type": "manual",
                "bitwidth_per_scope": [
                    [8, "ModuleDict/SymmetricQuantizer[/nncf_model_input_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/conv_transpose2d_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/conv_transpose2d_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/conv_transpose2d_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/conv_transpose2d_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[2]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/ReLU[5]/RELU_0]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[0]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[1]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[down_path]/UNetConvBlock[2]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[down_path]/UNetConvBlock[3]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[down_path]/UNetConvBlock[4]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[up_path]/UNetUpBlock[0]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[up_path]/UNetUpBlock[0]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [2, "UNet/ModuleList[up_path]/UNetUpBlock[1]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "UNet/ModuleList[up_path]/UNetUpBlock[1]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "UNet/ModuleList[up_path]/UNetUpBlock[2]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[up_path]/UNetUpBlock[2]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[up_path]/UNetUpBlock[3]/NNCFConvTranspose2d[up]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/ModuleList[up_path]/UNetUpBlock[3]/UNetConvBlock[conv_block]/Sequential[block]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "UNet/NNCFConv2d[last]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"]
                ]
            }
        }
    }
}
