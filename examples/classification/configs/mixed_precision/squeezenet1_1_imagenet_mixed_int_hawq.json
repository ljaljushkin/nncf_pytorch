{
    "model": "squeezenet1_1",
    "pretrained": true,
    "input_info": {
        "sample_size": [
            1,
            3,
            224,
            224
        ]
    },
    "num_classes": 1000,
    "batch_size": 256,
    "optimizer": {
        "base_lr": 0.00031,
        "schedule_type": "plateau",
        "type": "Adam",
        "scheduler_params": {
            "threshold": 0.1,
            "cooldown": 3
        },
        "weight_decay": 1e-05
    },
    "target_device": "VPU",
    "compression": {
//        "weights": {
//            "logarithm_scale": true
//        },
//        "activations": {
//            "logarithm_scale": true
//        },
        "algorithm": "quantization",
        "initializer": {
            "precision": {
                "type": "manual",
                "bitwidth_per_scope": [
                    [8, "ModuleDict/SymmetricQuantizer[/nncf_model_input_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[classifier]/ReLU[2]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[10]/ReLU[expand1x1_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[10]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[10]/ReLU[squeeze_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[11]/ReLU[expand1x1_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[11]/ReLU[expand3x3_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[11]/ReLU[squeeze_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[12]/ReLU[expand1x1_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[12]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[12]/ReLU[squeeze_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[3]/ReLU[expand1x1_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[3]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[3]/ReLU[squeeze_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[4]/ReLU[expand1x1_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[4]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[4]/ReLU[squeeze_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[6]/ReLU[expand1x1_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[6]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[6]/ReLU[squeeze_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[7]/ReLU[expand1x1_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[7]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[7]/ReLU[squeeze_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[9]/ReLU[expand1x1_activation]/RELU_0]"],
                    [4, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[9]/ReLU[expand3x3_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/Fire[9]/ReLU[squeeze_activation]/RELU_0]"],
                    [8, "ModuleDict/SymmetricQuantizer[SqueezeNet/Sequential[features]/ReLU[1]/RELU_0]"],
                    [4, "SqueezeNet/Sequential[classifier]/NNCFConv2d[1]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[10]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[10]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[10]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[11]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[11]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[11]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[12]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[12]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[12]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[3]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[3]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[3]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[4]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[4]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[4]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[6]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[6]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[6]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[7]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[7]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[7]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[9]/NNCFConv2d[expand1x1]/ModuleDict[pre_ops]/UpdateWeight[0]/SymmetricQuantizer[op]"],
                    [4, "SqueezeNet/Sequential[features]/Fire[9]/NNCFConv2d[expand3x3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/Fire[9]/NNCFConv2d[squeeze]/ModuleDict[pre_ops]/UpdateWeight[2]/SymmetricQuantizer[op]"],
                    [8, "SqueezeNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]"]
                ]
            },
            "range": {
                "type": "min_max"
            }
        }
    }
}
